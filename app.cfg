var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x7FFFF;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 2;
clock0Params.startFlag = true;
Program.global.clock0 = Clock.create("&clockISRA", 9, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "clock1";
clock1Params.period = 2;
clock1Params.startFlag = true;
Program.global.clock1 = Clock.create("&clockISRB", 10, clock1Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swiHandleA";
swi0Params.priority = 2;
Program.global.swiHandleA = Swi.create("&channelUpdate", swi0Params);
var swi0Params0 = new Swi.Params();
swi0Params0.instance.name = "swiHandleB";
swi0Params0.priority = 2;
Program.global.swiHandleB = Swi.create("&schedulingForCurrentSF", swi0Params0);
var task0Params = new Task.Params();
task0Params.instance.name = "task0";
Program.global.task0 = Task.create("&lteSystemInit", task0Params);
Idle.idleFxns[0] = "&displaySchedulerInfo";
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "reInitSystem";
Program.global.reInitSystem = Semaphore.create(0, semaphore0Params);
var heapMem0Params = new HeapMem.Params();
heapMem0Params.instance.name = "bufferHeap";
heapMem0Params.size = 0x7FFFF;
heapMem0Params.sectionName = ".bigMem";
Program.global.bufferHeap = HeapMem.create(heapMem0Params);
Program.sectMap[".bigMem"] = new Program.SectionSpec();
Program.sectMap[".bigMem"].loadSegment = "MSMCSRAM";
